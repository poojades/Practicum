/******************************************************************************
Modification Log
Version 		Date 			Author			Comments
1.0			5-29-2013		Rucha Shintre				Initial Version
1.1			6-05-2013		Pooja Desai,Rucha Shintre		Modified for use of a,b ; 
*******************************************************************************/

#include "FeistelPRP.h"

static char * count;

int* prp(int blocks, unsigned char* key)
{
	int i;
	count = malloc(blocks*sizeof(char));
	memset(count,0,blocks * sizeof(char));
	for (i=0;i<blocks;i++) {
		printf("%d -> %02x\n",i,count[i]);
	}
	//second argument is the file name to be permuted
	//atoi converted string to integer, we get the file size directly.
	//blocks = atoi(argv[1]);
    //else {
    //	printf("passing block number as parameter\n");
    //	exit(0);
    //}
    	//printf("file size: %dG\n",filesize);
	
	//calculate blocklength 30 - 5 = 25 ( 2^30 stands for 1 gb, 2^5 for 32 bytes)
	//int temp = log2(GB) - log2(BLOCK_LENGTH);
	
    	//blocks = filesize * (1<<temp);
    printf("block num: %d\n",blocks);
    fflush(stdout);

	//find the bit length  of the each element of array to get number of blocks
	index_bit_length = log2(blocks);
	int bit = ceil(index_bit_length);
	printf("bit num: %d\n",bit);
	//declare for block indices table, and permuted indices table
	int * blockindices;
	int * prpblockindices;
	//allocate memory for input and output table
    blockindices = (int *)malloc(blocks*sizeof(int));
    prpblockindices = (int *)malloc(blocks*sizeof(int));

	//initialize block array to the block indices
    int j=0;

    for (i=0;i<blocks;i++) {
		blockindices[i] = i;
    }
	
	//hardcoding 6 seeds
	/*
	unsigned char * seed1 = "jiedai";
	unsigned char * seed2 = "ruchashintre";
	unsigned char * seed3 = "poojadesai";
	unsigned char * seed4 = "CMUMSE";
	unsigned char * seed5 = "BOSCH";
	unsigned char * seed6 = "jorge";
	*/
	unsigned char seed1[16],seed2[16],seed3[16],seed4[16],seed5[16],seed6[16];
	keygen_init();
	seeding(key);
	keygen(seed1,16);
	keygen(seed2,16);
	keygen(seed3,16);
	keygen(seed4,16);
	keygen(seed5,16);
	keygen(seed6,16);    
    //double startTime, endTime;
    //startTime = getCPUTime();
	//Generate 6 functions
	round1table = malloc(blocks*sizeof(unsigned int));
	generateRoundFunctions(seed1,round1table,blocks);
	round2table = malloc(blocks*sizeof(unsigned int));
	generateRoundFunctions(seed2,round2table,blocks);
	round3table = malloc(blocks*sizeof(unsigned int));
	generateRoundFunctions(seed3,round3table,blocks);
	round4table = malloc(blocks*sizeof(unsigned int));	
	generateRoundFunctions(seed4,round4table,blocks);
	round5table = malloc(blocks*sizeof(unsigned int));
	generateRoundFunctions(seed5,round5table,blocks);
	round6table = malloc(blocks*sizeof(unsigned int));
	generateRoundFunctions(seed6,round6table,blocks);
	printf("6 tables generated\n");
    //endTime = getCPUTime();
    //fprintf( stderr, "CPU time used for PRNG = %lf\n", (endTime - startTime) );
    
    //startTime = getCPUTime();
	//using setting in the paper: change it later, to calculate a and b
	int a = ceil(sqrt(blocks));
	int b = ceil(sqrt(blocks))+1;
	printf("a=%d,b=%d\n",a,b);
	//get the keys for permutation
	
	//unsigned char * keyseed = "anappleadaykeepsadoctoraway";
	//int key = genkey(keyseed);
	
	//do this for six rounds
	for(i=0;i<blocks;i++){
		prpblockindices[i]=Fe(NOOFROUNDS, a, b,i, blocks, bit);
	}
	
	//for(i=0;i<blocks;i++){
		//printf("%d -> %d\n", blockindices[i], prpblockindices[i]);		
	//}

	//endTime = getCPUTime();
    //fprintf( stderr, "CPU time used for PRP = %lf\n", (endTime - startTime) );
    printf("PRP: finish \n");
    fflush(stdout);
    return prpblockindices;
}

//generate 6 different functions and store in memory
void generateRoundFunctions(unsigned char * seed, unsigned int * bufint, int blocks)
{


	int err;
	int i=0;
	int j=0;

	unsigned char buf[4];
	
	//bufint = malloc(blocks*sizeof(unsigned int));

	
	int index = 0;
	prng_state prng; 
	
	if ((err = fortuna_start(&prng)) != CRYPT_OK) {
		printf("start error: %s\n", error_to_string(err));
	}
	if ((err = fortuna_add_entropy(seed, sizeof(seed), &prng))!= CRYPT_OK) {
		printf("Add entropy error: %s\n", error_to_string(err));
	}
	if ((err = fortuna_ready(&prng)) != CRYPT_OK) {
		printf("Ready error: %s\n", error_to_string(err));
	}
		

	for(i=0;i<blocks;i++){
			
		fortuna_read(buf,sizeof(buf),&prng);
		bufint[i] = *(unsigned int *)buf;	
	}

}

/*
//generate the seed for permuting 
int genkey(char *seed){

	int err;
	int i=0;
	int j=0;
	
	unsigned char buf[4];
	unsigned int bufint;
	
	int index = 0;
	prng_state prng; 
	
	if ((err = yarrow_start(&prng)) != CRYPT_OK) {
		printf("start error: %s\n", error_to_string(err));
	}
	if ((err = yarrow_add_entropy(seed, strlen(seed), &prng))!= CRYPT_OK) {
		printf("Add entropy error: %s\n", error_to_string(err));
	}
	if ((err = yarrow_ready(&prng)) != CRYPT_OK) {
		printf("Ready error: %s\n", error_to_string(err));
	}
		
	yarrow_read(buf,sizeof(buf),&prng);
	printf("prng info:%u",buf[0]);
	bufint = *(unsigned int *)buf;	
	
	return bufint;
}
*/

// buf = k = random number
int Fe(int r, int a, int b, int m, int blocks, int bit){
	int i;
	int c = fe(r,a,b,m,bit);
	//c = c % blocks;
	if(c < blocks) {
		while (count[c]!=0)
			c++;
		count[c] = 1;
		return c;
	}
	else {
		//perform cycle walking
		return Fe(r, a, b,c, blocks, bit);
	}
}

//computation of L , R
int fe(int r, int a, int b, long m,int bit){


	int tmp, j;
	int bitnum = ceil(log2(b));
	int L = (int)m % a;
	int R = (int)m / a;
	for(j=1;j<=r;j++){
		int fval = applyRoundFunctions(j,R,bitnum);
		if(!(j%2)){
			tmp = (L + fval) % b;
		}else{
			tmp = (L + fval) % a;
		}
		L = R;
		R = tmp;	
	}
	
	if(!(r%2)){
		int kmn = (a*L+R);
		return (a*L+R);
	}else{
		int kmn = (a*R+L);
		return (a*R+L);
	}
}

//get the value of the function for given R
int applyRoundFunctions(int round, int R, int bit){
	switch(round){
		case 1: return round1table[R]&((1<<(bit))-1);
		case 2: return round2table[R]&((1<<(bit))-1);
		case 3: return round3table[R]&((1<<(bit))-1);
		case 4: return round4table[R]&((1<<(bit))-1);
		case 5: return round5table[R]&((1<<(bit))-1);
		case 6: return round6table[R]&((1<<(bit))-1);	
	}
}
	//print initial and final permutation
